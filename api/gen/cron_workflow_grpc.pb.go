// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CronWorkflowServiceClient is the client API for CronWorkflowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CronWorkflowServiceClient interface {
	CreateCronWorkflow(ctx context.Context, in *CreateCronWorkflowRequest, opts ...grpc.CallOption) (*CronWorkflow, error)
	UpdateCronWorkflow(ctx context.Context, in *UpdateCronWorkflowRequest, opts ...grpc.CallOption) (*CronWorkflow, error)
	GetCronWorkflow(ctx context.Context, in *GetCronWorkflowRequest, opts ...grpc.CallOption) (*CronWorkflow, error)
	ListCronWorkflows(ctx context.Context, in *ListCronWorkflowRequest, opts ...grpc.CallOption) (*ListCronWorkflowsResponse, error)
	DeleteCronWorkflow(ctx context.Context, in *DeleteCronWorkflowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type cronWorkflowServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCronWorkflowServiceClient(cc grpc.ClientConnInterface) CronWorkflowServiceClient {
	return &cronWorkflowServiceClient{cc}
}

func (c *cronWorkflowServiceClient) CreateCronWorkflow(ctx context.Context, in *CreateCronWorkflowRequest, opts ...grpc.CallOption) (*CronWorkflow, error) {
	out := new(CronWorkflow)
	err := c.cc.Invoke(ctx, "/api.CronWorkflowService/CreateCronWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWorkflowServiceClient) UpdateCronWorkflow(ctx context.Context, in *UpdateCronWorkflowRequest, opts ...grpc.CallOption) (*CronWorkflow, error) {
	out := new(CronWorkflow)
	err := c.cc.Invoke(ctx, "/api.CronWorkflowService/UpdateCronWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWorkflowServiceClient) GetCronWorkflow(ctx context.Context, in *GetCronWorkflowRequest, opts ...grpc.CallOption) (*CronWorkflow, error) {
	out := new(CronWorkflow)
	err := c.cc.Invoke(ctx, "/api.CronWorkflowService/GetCronWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWorkflowServiceClient) ListCronWorkflows(ctx context.Context, in *ListCronWorkflowRequest, opts ...grpc.CallOption) (*ListCronWorkflowsResponse, error) {
	out := new(ListCronWorkflowsResponse)
	err := c.cc.Invoke(ctx, "/api.CronWorkflowService/ListCronWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronWorkflowServiceClient) DeleteCronWorkflow(ctx context.Context, in *DeleteCronWorkflowRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.CronWorkflowService/DeleteCronWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronWorkflowServiceServer is the server API for CronWorkflowService service.
// All implementations must embed UnimplementedCronWorkflowServiceServer
// for forward compatibility
type CronWorkflowServiceServer interface {
	CreateCronWorkflow(context.Context, *CreateCronWorkflowRequest) (*CronWorkflow, error)
	UpdateCronWorkflow(context.Context, *UpdateCronWorkflowRequest) (*CronWorkflow, error)
	GetCronWorkflow(context.Context, *GetCronWorkflowRequest) (*CronWorkflow, error)
	ListCronWorkflows(context.Context, *ListCronWorkflowRequest) (*ListCronWorkflowsResponse, error)
	DeleteCronWorkflow(context.Context, *DeleteCronWorkflowRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCronWorkflowServiceServer()
}

// UnimplementedCronWorkflowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCronWorkflowServiceServer struct {
}

func (UnimplementedCronWorkflowServiceServer) CreateCronWorkflow(context.Context, *CreateCronWorkflowRequest) (*CronWorkflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCronWorkflow not implemented")
}
func (UnimplementedCronWorkflowServiceServer) UpdateCronWorkflow(context.Context, *UpdateCronWorkflowRequest) (*CronWorkflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCronWorkflow not implemented")
}
func (UnimplementedCronWorkflowServiceServer) GetCronWorkflow(context.Context, *GetCronWorkflowRequest) (*CronWorkflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCronWorkflow not implemented")
}
func (UnimplementedCronWorkflowServiceServer) ListCronWorkflows(context.Context, *ListCronWorkflowRequest) (*ListCronWorkflowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCronWorkflows not implemented")
}
func (UnimplementedCronWorkflowServiceServer) DeleteCronWorkflow(context.Context, *DeleteCronWorkflowRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCronWorkflow not implemented")
}
func (UnimplementedCronWorkflowServiceServer) mustEmbedUnimplementedCronWorkflowServiceServer() {}

// UnsafeCronWorkflowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CronWorkflowServiceServer will
// result in compilation errors.
type UnsafeCronWorkflowServiceServer interface {
	mustEmbedUnimplementedCronWorkflowServiceServer()
}

func RegisterCronWorkflowServiceServer(s grpc.ServiceRegistrar, srv CronWorkflowServiceServer) {
	s.RegisterService(&_CronWorkflowService_serviceDesc, srv)
}

func _CronWorkflowService_CreateCronWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCronWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).CreateCronWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CronWorkflowService/CreateCronWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).CreateCronWorkflow(ctx, req.(*CreateCronWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWorkflowService_UpdateCronWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCronWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).UpdateCronWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CronWorkflowService/UpdateCronWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).UpdateCronWorkflow(ctx, req.(*UpdateCronWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWorkflowService_GetCronWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCronWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).GetCronWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CronWorkflowService/GetCronWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).GetCronWorkflow(ctx, req.(*GetCronWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWorkflowService_ListCronWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCronWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).ListCronWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CronWorkflowService/ListCronWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).ListCronWorkflows(ctx, req.(*ListCronWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronWorkflowService_DeleteCronWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCronWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronWorkflowServiceServer).DeleteCronWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CronWorkflowService/DeleteCronWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronWorkflowServiceServer).DeleteCronWorkflow(ctx, req.(*DeleteCronWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CronWorkflowService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CronWorkflowService",
	HandlerType: (*CronWorkflowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCronWorkflow",
			Handler:    _CronWorkflowService_CreateCronWorkflow_Handler,
		},
		{
			MethodName: "UpdateCronWorkflow",
			Handler:    _CronWorkflowService_UpdateCronWorkflow_Handler,
		},
		{
			MethodName: "GetCronWorkflow",
			Handler:    _CronWorkflowService_GetCronWorkflow_Handler,
		},
		{
			MethodName: "ListCronWorkflows",
			Handler:    _CronWorkflowService_ListCronWorkflows_Handler,
		},
		{
			MethodName: "DeleteCronWorkflow",
			Handler:    _CronWorkflowService_DeleteCronWorkflow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cron_workflow.proto",
}
